#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1


# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

CFLAGS ?=
CXXFLAGS ?=
LDFLAGS ?=
PREFIX ?= /usr
DATADIR ?= /opt

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O2
	CXXFLAGS += -O2
else
	CFLAGS += -O0
	CXXFLAGS += -O0
endif

CFLAGS += -fPIC -Wall -g -fvisibility=hidden
CXXFLAGS += -fPIC -Wall -g -fvisibility=hidden
LDFLAGS += -Wl,--hash-style=both 

LDFLAGS += -Wl,--rpath=$(PREFIX)/lib -Wl,--as-needed

CMAKE_TMP_DIR = $(CURDIR)/cmake_tmp

configure: configure-stamp
configure-stamp:
	dh_testdir
	# Add here commands to configure the package.

	mkdir -p $(CMAKE_TMP_DIR);
	cd $(CMAKE_TMP_DIR); CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" cmake .. -DCMAKE_INSTALL_PREFIX=$(PREFIX)
	touch configure-stamp

build: build-stamp

build-stamp: configure-stamp 
	dh_testdir

	# Add here commands to compile the package.
	cd $(CMAKE_TMP_DIR) && $(MAKE)
	
	for f in `find $(CURDIR)/debian/ -name "*.in"`; do \
		cat $$f > $${f%.in}; \
		sed -i -e "s#@PREFIX@#$(PREFIX)#g" $${f%.in}; \
		sed -i -e "s#@DATADIR@#$(DATADIR)#g" $${f%.in}; \
	done

	# Make .db file
	#$(CMAKE_TMP_DIR)/utilities/email-service_initDB create 0 $(CMAKE_TMP_DIR)/utilities 

	touch $@


clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp configure-stamp

	# Add here commands to clean up after the build process.
	-$(MAKE) clean
	rm -rf CMakeCache.txt
	rm -rf CMakeFiles
	rm -rf cmake_install.cmake
	rm -rf Makefile
	rm -rf install_manifest.txt
	rm -rf *.so
	rm -rf $(CMAKE_TMP_DIR)

	for f in `find $(CURDIR)/debian/ -name "*.in"`; do \
		rm -f $${f%.in}; \
	done

	# Delete .db file
	rm -f .*.db .*.db-journal
	# Delete auto created files
	rm -f Makefile.in aclocal.m4 configure config.sub config.guess config.h.in depcomp ltmain.sh missing install-sh 

	dh_clean 

install: build
	dh_testdir
	dh_testroot
	dh_clean -k 
	dh_installdirs

	# Add here commands to install the package into debian/mm-log.
	cd $(CMAKE_TMP_DIR) && $(MAKE) DESTDIR=$(CURDIR)/debian/tmp install
	mkdir -p $(CURDIR)/debian/tmp/opt/dbspace
	#cp $(CMAKE_TMP_DIR)/utilities/.email-service.db $(CURDIR)/debian/tmp/opt/dbspace
	#cp $(CMAKE_TMP_DIR)/utilities/.email-service.db-journal $(CURDIR)/debian/tmp/opt/dbspace


# Build architecture-independent files here.
binary-indep: build install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_installchangelogs 
	dh_installdocs
	dh_installexamples
	dh_install --sourcedir=debian/tmp
#	dh_installmenu
#	dh_installdebconf	
#	dh_installlogrotate
#	dh_installemacsen
#	dh_installpam
#	dh_installmime
#	dh_python
#	dh_installinit
#	dh_installcron
#	dh_installinfo
	dh_installman
	dh_link
#	dh_strip
	dh_strip --dbg-package=email-service-dbg
	dh_compress
	dh_fixperms
#	dh_perl
	dh_makeshlibs
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install 

